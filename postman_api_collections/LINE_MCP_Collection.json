{
  "info": {
    "_postman_id": "line-mcp-collection",
    "name": "LINE MCP Examples",
    "description": "Complete LINE MCP Server testing with all 10 tools - messaging, rich content, user management, and webhook handling",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "dev-python-host",
      "value": "http://localhost:5001",
      "description": "LINE MCP Server host"
    },
    {
      "key": "line_channel_access_token",
      "value": "YOUR_LINE_CHANNEL_ACCESS_TOKEN",
      "description": "LINE Bot Channel Access Token (REQUIRED)"
    },
    {
      "key": "line_channel_secret",
      "value": "YOUR_LINE_CHANNEL_SECRET",
      "description": "LINE Bot Channel Secret (REQUIRED)"
    },
    {
      "key": "webhook_url",
      "value": "",
      "description": "Your webhook URL (OPTIONAL - only needed for webhook event handling)"
    },
    {
      "key": "test_user_id",
      "value": "U1234567890abcdef1234567890abcdef",
      "description": "Test LINE User ID"
    },
    {
      "key": "test_group_id",
      "value": "C1234567890abcdef1234567890abcdef",
      "description": "Test LINE Group ID"
    }
  ],
  "item": [
    {
      "name": "1. Basic Messaging Tools (No Webhook Required)",
      "item": [
        {
          "name": "1.1 Send Text Message",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 20000,\n        \"input\": \"Send a text message 'Hello! Welcome to our LINE MCP integration. This is a test message to verify basic messaging functionality.' to user {{test_user_id}}\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are a LINE messaging assistant that sends clear and friendly messages\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        },
        {
          "name": "1.2 Send Text with Quick Replies",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 20000,\n        \"input\": \"Send a text message 'What would you like to do today?' to user {{test_user_id}} with quick reply buttons: 'View Products', 'Check Orders', 'Get Help', and 'Contact Support'\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are a LINE assistant creating interactive messages with quick reply options\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        },
        {
          "name": "1.3 Send Image Message",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 20000,\n        \"input\": \"Send an image message to user {{test_user_id}} with image URL 'https://picsum.photos/800/600' (a sample image from Picsum). This is for testing image messaging capabilities.\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are a LINE assistant that sends images to enhance user experience\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        },
        {
          "name": "1.4 Broadcast Message",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 20000,\n        \"input\": \"Broadcast a message to all friends: 'Exciting news! Our LINE MCP integration is now live! Experience seamless messaging with advanced features including rich content, user management, and real-time webhooks. Thank you for being part of our community!'\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are a LINE broadcast specialist sending important announcements to all users\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        }
      ]
    },
    {
      "name": "2. Rich Content Messages (No Webhook Required)",
      "item": [
        {
          "name": "2.1 Send Buttons Template",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 20000,\n        \"input\": \"Send a buttons template to user {{test_user_id}} with title 'Customer Service', text 'How can we help you today?', and buttons: 'View Profile' (message action), 'Visit Website' (URI action to https://example.com), 'Get Support' (postback action with data=support_request), and 'Track Order' (message action)\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are a LINE rich content specialist creating interactive button templates\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        },
        {
          "name": "2.2 Send Carousel Template",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 20000,\n        \"input\": \"Send a carousel message to user {{test_user_id}} with 3 cards: Card 1 - 'Math Calculator' with description 'Perform complex mathematical calculations using NumPy' and button 'Calculate'; Card 2 - 'Email Assistant' with description 'Manage your emails with Google Workspace integration' and button 'Check Email'; Card 3 - 'Data Analytics' with description 'Analyze data with Neo4j graph database' and button 'Analyze Data'\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are a LINE carousel specialist showcasing multiple service options\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        },
        {
          "name": "2.3 Send Confirmation Template",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 20000,\n        \"input\": \"Send a confirmation template to user {{test_user_id}} asking 'Would you like to subscribe to our premium MCP services for advanced features?' with 'Yes, Subscribe' (postback action with data=subscribe_yes) and 'No, Maybe Later' (postback action with data=subscribe_no) buttons\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are a LINE confirmation specialist helping users make decisions\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        },
        {
          "name": "2.4 Send Flex Message",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 20000,\n        \"input\": \"Send a flex message to user {{test_user_id}} with a simple card containing title 'Welcome to MCP Platform!' and description 'Experience the power of Model Context Protocol with seamless integrations across multiple services. Your one-stop solution for mathematical calculations, email management, data analytics, and messaging.'\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are a LINE flex message designer creating beautiful custom layouts\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        }
      ]
    },
    {
      "name": "3. User & Group Management (No Webhook Required)",
      "item": [
        {
          "name": "3.1 Get User Profile",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 20000,\n        \"input\": \"Get the complete profile information for user {{test_user_id}}. Show their display name, user ID, profile picture URL, and status message.\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are a LINE user management specialist retrieving user profile data\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        },
        {
          "name": "3.2 Get Group Summary",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 20000,\n        \"input\": \"Get the group summary information for group {{test_group_id}}. Show the group name, group ID, and group picture URL.\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are a LINE group management specialist retrieving group information\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        },
        {
          "name": "3.3 Get Group Member Profile",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 20000,\n        \"input\": \"Get the profile of user {{test_user_id}} in group {{test_group_id}}. Use the manage_group_members action with get_member_profile to retrieve their display name, user ID, and profile picture within the group context.\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are a LINE group member management specialist\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        }
      ]
    },
    {
      "name": "4. Advanced Features",
      "item": [
        {
          "name": "4.1 Create Rich Menu (No Webhook Required)",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 20000,\n        \"input\": \"Create a rich menu with name 'MCP Services Menu' and chat bar text 'Services'. This menu will provide quick access to our main MCP services including mathematical calculations, email management, and data analytics.\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are a LINE rich menu designer creating interactive navigation menus\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        },
        {
          "name": "4.2 Handle Webhook Event (WEBHOOK REQUIRED)",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\",\n            \"webhook_url\": \"{{webhook_url}}\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 20000,\n        \"input\": \"Process a webhook event with data: {\\\"events\\\": [{\\\"type\\\": \\\"message\\\", \\\"source\\\": {\\\"userId\\\": \\\"{{test_user_id}}\\\"}, \\\"message\\\": {\\\"type\\\": \\\"text\\\", \\\"text\\\": \\\"Hello MCP Bot!\\\"}, \\\"timestamp\\\": 1672531200000}]}. Analyze and process this incoming message event.\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are a LINE webhook event processor handling incoming messages and events\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        }
      ]
    },
    {
      "name": "5. Integration Testing (No Webhook Required)",
      "item": [
        {
          "name": "5.1 Multi-Service Integration",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\"\n        },\n        \"NUMPY_MCP\": {},\n        \"MCP-GSUITE\": {\n            \"token\": \"\",\n            \"refresh_token\": \"\",\n            \"client_id\": \"\",\n            \"client_secret\": \"\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 30000,\n        \"input\": \"Demonstrate integration capabilities: 1) Calculate the eigenvalues of matrix [[4,2],[1,3]] using NumPy, 2) Send the calculation results via LINE message to user {{test_user_id}} in a formatted text message, 3) Create a buttons template showing calculation options for future use.\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are an integration specialist demonstrating seamless cross-service functionality\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\", \"NUMPY_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        },
        {
          "name": "5.2 Complete Workflow Test",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"selected_server_credentials\": {\n        \"LINE_MCP\": {\n            \"channel_access_token\": \"{{line_channel_access_token}}\",\n            \"channel_secret\": \"{{line_channel_secret}}\"\n        }\n    },\n    \"client_details\": {\n        \"api_key\": \"\",\n        \"temperature\": 0.1,\n        \"max_token\": 30000,\n        \"input\": \"Execute a complete LINE bot workflow: 1) Send a welcome text message, 2) Follow up with a carousel showing our services (Math, Email, Analytics), 3) Send a confirmation asking if the user wants to subscribe to updates, 4) Get the user's profile information, 5) Send a flex message summarizing their interaction. Send all messages to user {{test_user_id}}.\",\n        \"input_type\": \"text\",\n        \"prompt\": \"you are a LINE bot workflow orchestrator creating comprehensive user experiences\",\n        \"chat_model\": \"gemini-2.0-flash\",\n        \"chat_history\": []\n    },\n    \"selected_client\": \"MCP_CLIENT_GEMINI\",\n    \"selected_servers\": [\n        \"LINE_MCP\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{dev-python-host}}/api/v1/mcp/process_message",
              "host": ["{{dev-python-host}}"],
              "path": ["api", "v1", "mcp", "process_message"]
            }
          }
        }
      ]
    }
  ]
}
